import java.time.format.DateTimeFormatter

buildscript{
    ext{
//        arcVersion = "v135"

        // v7
        mindustryPath = "com.github.Anuken.MindustryJitpack"
        mindustryVersionFull = '68f053f409c999f0a66bc6ac30760c331b2c0d6c'
        mindustryVersion = mindustryVersionFull.substring(0, 10)
        mindustryVersionOld = "v135"
        arcVersion = "ef9d6ac655"
//        arcVersion = "916c5a77"


        // normal
        //mindustryPath = "com.github.Anuken.Mindustry"
        //mindustryVersion = 'v135'
        //arcVersion=mindustryVersion

        aciVersion = "45ad8cd8ed9"
        /*String modCoreVersionDemo = null;
        try {
            modCoreVersionDemo = new String(new java.net.URL("https://raw.githubusercontent.com/Zelaux/ZelauxModCore/master/versions/" + mindustryVersion + ".txt").openStream().readAllBytes());
        } catch (IOException exception) {
            throw new RuntimeException(exception);
        }
        println "core: " + modCoreVersionDemo
        modCoreVersion = modCoreVersionDemo*/
        modCoreVersion = "72b85a0ea32"

        kotlinVersion = "1.6.0"
        jabelVersion = "0.7.0"
    }
    repositories{
        mavenLocal()
        mavenCentral()
        google()
        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven{ url 'https://jitpack.io' }
    }

    dependencies{
        classpath "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
        classpath "$mindustryPath:core:$mindustryVersion"
//        classpath "com.github.Anuken.Mindustry:tools:$mindustryVersionOld"
        classpath "com.github.Anuken.Arc:arc-core:$arcVersion"
        classpath "com.github.Anuken.Arc:packer:$arcVersion"
    }
}
plugins{
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id "org.jetbrains.kotlin.kapt" version "$kotlinVersion"
//    id 'groovy'
}
ext{
    //the build number that this mod is made for
    //version of SDK you will be using
    sdkVersion = '30'
    sdkRoot = System.getenv("ANDROID_HOME")

    doExec = { cmd ->
        def proc = cmd.execute(null, new File("$buildDir/libs"))
        proc.waitForProcessOutput(System.out, System.err)
    }
}

version '1.0'
allprojects{
    apply plugin: 'maven-publish'

//    version = 'release'
    group = 'com.github.Zelaux'
    ext{
        arcModule = { String name ->
            //skip to last submodule
            if(name.contains(':')) name = name.split(':').last()
            return "com.github.Anuken.Arc:$name:$arcVersion"
        }
        mindustryModule = { String name ->
            //skip to last submodule
            if(name.contains(':')) name = name.split(':').last()
            return "$mindustryPath:$name:$mindustryVersion"
        }
        mindustryOldModule = { String name ->
            //skip to last submodule
            if(name.contains(':')) name = name.split(':').last()
            return "com.github.Anuken.Mindustry:$name:v135"
        }
        writeProcessors = {
            new File(rootDir, "annotations/src/main/resources/META-INF/services/").mkdirs()
            def processorFile = new File(rootDir, "annotations/src/main/resources/META-INF/services/javax.annotation.processing.Processor")
            def text = new StringBuilder()
            def files = new File(rootDir, "annotations/src/main/java")
            files.eachFileRecurse(
                    groovy.io.FileType.FILES
            ){ file ->
                if(file.name.endsWith(".java") && (file.text.contains(" extends ModBaseProcessor") || (file.text.contains(" extends AbstractProcessor") && !file.text.contains("abstract class")))){
                    text.append(file.path.substring(files.path.length() + 1)).append("\n")
                }
            }

            processorFile.text = text.toString().replace(".java", "").replace("/", ".").replace("\\", ".")
        }
    }
    repositories{
        mavenLocal()
        google()
        mavenCentral()
        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven{ url "https://oss.sonatype.org/content/repositories/releases/" }
        maven{ url 'https://jitpack.io' }
    }
    tasks.withType(JavaCompile){
        targetCompatibility = 8
        sourceCompatibility = JavaVersion.VERSION_16
        options.encoding = "UTF-8"
        options.compilerArgs += ["-Xlint:deprecation"]

        options.forkOptions.jvmArgs.addAll([
                '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
                '--add-opens=java.base/sun.reflect.annotation=ALL-UNNAMED'
        ])
    }
}
configure(project(":annotations")){
    tasks.withType(JavaCompile){
        targetCompatibility = 8
        sourceCompatibility = 8
        options.fork = true
    }
}

//compile with java 8 compatibility for everything except the annotation project
configure(subprojects - project(":annotations")){
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }

    tasks.withType(Javadoc){
        options{
            addStringOption('Xdoclint:none', '-quiet')
            addStringOption('-release', '16')
        }
    }
}
project(":core"){
    apply plugin: "java-library"
    apply plugin: "kotlin"
    apply plugin: "kotlin-kapt"

    kapt{
        javacOptions{
            option("-source", "16")
            option("-target", "1.8")
        }
    }
    compileJava.options.fork = true
    task preGen{
        outputs.upToDateWhen{ false }
        writeProcessors()
    }
    task sourcesJar(type: Jar, dependsOn: classes){
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task assetsJar(type: Jar, dependsOn: ":tools:pack"){
        archiveClassifier = 'assets'
        from files("assets"){
            exclude "config", "cache", "music", "sounds"
        }
    }
    artifacts{
        archives sourcesJar
        archives assetsJar
    }
    dependencies{
        compileJava.dependsOn(preGen)

        compileOnly "org.lz4:lz4-java:1.7.1"
        compileOnly arcModule("arc-core")
        compileOnly arcModule("extensions:flabel")
        compileOnly arcModule("extensions:freetype")
        compileOnly arcModule("extensions:g3d")
        compileOnly arcModule("extensions:fx")
        compileOnly arcModule("extensions:arcnet")
//        compileOnly "com.github.Anuken.Mindustry:entities:$mindustryVersion"
        implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:plugins:$modCoreVersion"
        compileOnly "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"

        implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"

        compileOnly "$mindustryPath:core:$mindustryVersion"
//        compileOnly "com.github.Anuken.Mindustry:tools:$mindustryVersionOld"

        annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
        compileOnly project(":annotations")
        kapt project(":annotations")
//        annotationProcessor project(":annotations")

    }
    afterEvaluate{
        task mergedJavadoc(type: Javadoc){
            def blacklist = [/*project(":ios"), project(":desktop"), project(":server"),*/ project(":annotations")]
            if(findProject(":android") != null){
                blacklist += project(":android")
            }

            source rootProject.subprojects.collect{ project ->
                if(!blacklist.contains(project) && project.hasProperty("sourceSets")){
                    return project.sourceSets.main.allJava
                }
            }

            classpath = files(rootProject.subprojects.collect{ project ->
                if(!blacklist.contains(project) && project.hasProperty("sourceSets")){
                    return project.sourceSets.main.compileClasspath
                }
            })
            destinationDir = new File(buildDir, 'javadoc')
        }
    }
    jar{
        exclude("gas/entities/comp/**")
        exclude("gas/entities/compByAnuke/**")
        exclude("gas/mma/**")
    }
}

project(":tests"){
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "kotlin"
    apply plugin: "kotlin-kapt"

    kapt{
        javacOptions{
            option("-source", "16")
            option("-target", "1.8")
        }
    }
    compileJava.options.fork = true

    dependencies{
        compileOnly project(":core")
        compileOnly arcModule('arc-core')
        compileOnly mindustryModule('core')
        compileOnly mindustryModule('server')
        testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.1"
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.1"
        testImplementation arcModule("backends:backend-headless")
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.1"

        implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:plugins:$modCoreVersion"
        compileOnly "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"

        implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"

        annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
        compileOnly project(":annotations")
        kapt project(":annotations")

//        testImplementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
//        testImplementation "com.github.Zelaux.ZelauxModCore:plugins:$modCoreVersion"
//        compileOnly "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
    }

    test{
        //fork every test so mods don't interact with each other
        forkEvery = 1
        useJUnitPlatform()
        workingDir = new File("../core/assets")
        testLogging{
            exceptionFormat = 'full'
            showStandardStreams = true
        }
    }
}
project(":tools"){
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "kotlin"
    apply plugin: "kotlin-kapt"

    kapt{
        javacOptions{
            option("-source", "16")
            option("-target", "16")
        }
    }
    compileJava.options.fork = true

    tasks.withType(JavaCompile){
//        options.compilerArgs.removeAll(['-release', '8'])
        for(int i = 0; i < options.compilerArgs.size(); i++){
            println i + ": " + options.compilerArgs.get(i);
            if(options.compilerArgs.get(i) == "--release"){
                options.compilerArgs.set(i + 1, '16');
//                options.compilerArgs.remove(i+1);
//                options.compilerArgs.remove(i);
                break;
            }
        }
//        options.compilerArgs.addAll(['-source', '16'])
    }

    dependencies{
        implementation 'commons-io:commons-io:2.5'

        implementation project(":core")

        implementation arcModule("natives:natives-desktop")
        implementation arcModule("natives:natives-freetype-desktop")
        implementation arcModule("backends:backend-headless")

        implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.22.1'
        implementation "$mindustryPath:core:$mindustryVersion"

        implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:tools:$modCoreVersion"

//        implementation "com.github.Anuken.Mindustry:tools:$mindustryVersionOld"


        annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    }
}
project(":annotations"){
    apply plugin: "java-library"
    dependencies{
        implementation 'com.squareup:javapoet:1.12.1'
        implementation arcModule('arc-core')
        implementation "$mindustryPath:core:$mindustryVersion"
//        implementation "com.github.Anuken.Mindustry:tools:$mindustryVersionOld"

        implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:tools:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
    }
}
dependencies{
    implementation project(":core")
}
configure([":core", ":tools"].collect{ project(it) } + [project]){
    java{
//        withJavadocJar()
        withSourcesJar()
    }

    publishing{
        publications{
            maven(MavenPublication){
                from components.java
            }
        }
    }
}
task jarAndroid{
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists() }

        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (project(":core").configurations.compileClasspath.asList() + project(":core").configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")])
                .collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}
jar{
    dependsOn "core:jar"
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    /*from {
        project(":core").fileTree("build/libs/core.jar").collect { it.isDirectory() ? it : zipTree(it) }
    }*/
    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.json"
        include "icon.png"
    }

    from("core/assets/"){
        include "**"
    }
    doLast{
//        doExec("python ../../cmp.py")
    }
}
task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{ delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar" }
        delete{ delete "$buildDir/libs/${project.archivesBaseName}Android.jar" }
    }
}
task resolveDependencies{
    doLast{
        rootProject.allprojects{ project ->
            Set<Configuration> configurations = project.buildscript.configurations + project.configurations
            configurations.findAll{ c -> c.canBeResolved }.forEach{ c -> c.resolve() }
        }
    }
}
publishToMavenLocal{
    dependsOn("jar")
}
task mjar(){
    dependsOn "jar"
    doFirst{
    }
    ext{
        acopy = { String intoPath ->
            delete{
                delete "${intoPath}/${project.archivesBaseName}Desktop.jar"
            }
            copy{
                from "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
                into intoPath
            }
            println "moved to " + intoPath
        }
    }
    doLast{
        def modsDirectories = [];
        def file = new File(rootDir, "modsDirectories.txt");

        if(file.exists()){
            BufferedReader reader = new BufferedReader(new FileReader(file));
            reader.lines().forEach(line -> modsDirectories.add(line))
            reader.close();
        }else{
            modsDirectories.add("classic");
        }
        for(String directory : modsDirectories){
            if(directory.equals("classic")){
                directory = getdatadir() + "mods";
            }
//            println "directory: "+directory
            acopy(directory);
        }
        def time = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"));
        println "Build ended at: ${time}"
    }
}

def os(){ //Returns OS name
    String s = System.getProperty("os.name");
    return s == null ? "" : s;
}

def getdatadir(){ //Returns Mindustry data directory path
    def ret = System.getenv("MINDUSTRY_DATA_DIR")
    if(ret == null){
        def os = os()
        if(os.contains("Windows")){
            return System.getenv("AppData") + "\\Mindustry\\"
        }else if(os.contains("Linux") || os.contains("BSD")){
            if(System.getenv("XDG_DATA_HOME") != null){
                String dir = System.getenv("XDG_DATA_HOME")
                if(!dir.endsWith("/")) dir += "/"
                return dir + "Mindustry/"
            }
            return System.getProperty("user.home") + "/.local/share/Mindustry/"
        }else if(os.contains("Mac")){
            return System.getProperty("user.home") + "/Library/Application Support/Mindustry/";
        }
    }
    return ret
}
